// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#pragma warning disable 1591,0618,0105,0672,0108,SA1600

using System;
using System.Reactive;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using ReactiveUI.Events;

{{#Namespaces}}
using {{Name}};
{{/Namespaces}}
{{#DelegateNamespaces}}
using {{Name}};
{{/DelegateNamespaces}}

{{#Namespaces}}
namespace {{Name}}
{
    /// <summary>
    /// Methods that expose events for the platform.
    /// </summary>
    public static class EventsMixin
    {
        /// <summary>
        /// This class emits {{Name}} events as observables.
        /// </summary>
{{#Types}}
        public static {{Name}}Events Events(this {{Name}} @this)
        {
            return new {{Name}}Events(@this);
        }
{{/Types}}
    }

    /// <summary>
    /// This class emits {{Name}} events as observables.
    /// </summary>
{{#Types}}
    public class {{Name}}Events
{{#Parent}}
        : {{Name}}Events
{{/Parent}}
    {
{{Name}} _this;
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}" /> class.
        /// </summary>
        /// <param name="@this">The this.</param>
        public {{Name}}Events({{Name}} @this)
{{#Parent}}
            : base(@this)
{{/Parent}}
        {
            _this = @this;
        }

{{#Events}}

        /// <summary>
        /// Returns an observable sequence of {{EventArgsType}}.
        /// </summary>
{{#ObsoleteEventInfo}}
        [Obsolete{{#ObsoleteEventInfo.Message}}("{{ObsoleteEventInfo.Message}}"{{#ObsoleteEventInfo.IsError}}, true{{/ObsoleteEventInfo.IsError}}){{/ObsoleteEventInfo.Message}}]
{{/ObsoleteEventInfo}}
        public IObservable<{{EventArgsType}}>
    {{Name}} {
    get { return Observable.FromEventPattern<{{EventHandlerType}}, {{EventArgsType}}>
        (x => _this.{{Name}} += x, x => _this.{{Name}} -= x).Select(x => x.EventArgs); }
        }

        {{/Events}}
        }
        {{/Types}}
        }
        {{/Namespaces}}

        {{#DelegateNamespaces}}
        namespace {{Name}}.Rx
        {
        {{#Types}}
        public {{Abstract}} partial class {{Name}}Rx : {{Name}}
        {
        {{#ZeroParameterMethods}}
        readonly SingleAwaitSubject<Unit>
            _{{Name}} = new SingleAwaitSubject<Unit>
                ();
                public IObservable<Unit>
                    {{Name}}Obs { get { return _{{Name}}; } }
                    public override void {{Name}}()
                    {
                    _{{Name}}.OnNext(Unit.Default);
                    }

                    {{/ZeroParameterMethods}}
                    {{#SingleParameterMethods}}
                    readonly SingleAwaitSubject<{{ParameterType}}>
                        _{{Name}} = new SingleAwaitSubject<{{ParameterType}}>
                            ();
                            public IObservable<{{ParameterType}}>
                                {{Name}}Obs { get { return _{{Name}}; } }
                                public override void {{Name}}({{ParameterType}} {{ParameterName}})
                                {
                                _{{Name}}.OnNext({{ParameterName}});
                                }

                                {{/SingleParameterMethods}}
                                {{#MultiParameterMethods}}
                                readonly SingleAwaitSubject<Tuple<{{ParameterTypeList}}>> _{{Name}} = new SingleAwaitSubject<Tuple<{{ParameterTypeList}}>>();
        public IObservable<Tuple<{{ParameterTypeList}}>> {{Name}}Obs { get { return _{{Name}}; } }
        public override void {{Name}}({{ParameterList}})
        {
            _{{Name}}.OnNext(Tuple.Create({{ParameterNameList}}));
        }

{{/MultiParameterMethods}}
    }
{{/Types}}
}
{{/DelegateNamespaces}}

#pragma warning restore 1591,0618,0105,0672,0108
